name: Publish API Docker images

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "Bump the version of the API"
        type: choice
        required: true
        default: "patch"
        options:
          - "patch"
          - "minor"
          - "major"
          - "prepatch"
          - "preminor"
          - "premajor"
env:
  DRAFT: ${{ contains(inputs.bump, 'pre') }}

jobs:
  python_project:
    name: Build ecoindex API python project
    runs-on: ubuntu-latest
    outputs:
      wheel: ${{ steps.wheel.outputs.wheel }}
      api_version: ${{ steps.version.outputs.api_version }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x

      - name: Install poetry
        uses: abatilo/actions-poetry@v2

      - name: Install poetry build project
        run: pip install poetry-multiproject-plugin

      - name: Bump version
        run: task api:bump -- ${{ github.event.inputs.bump }}

      - name: Build
        run: task api:poetry:build

      - name: Upload wheel to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheel
          path: projects/ecoindex_api/dist/*.whl

      - name: Output version
        id: version
        run: echo "api_version=$(task api:poetry:version-short)" >> $GITHUB_OUTPUT

      - name: Output wheel
        id: wheel
        run: echo "wheel=$(ls projects/ecoindex_api/dist/*.whl)" >> $GITHUB_OUTPUT

      - name: Output summary
        run: |
          echo "API version ${{ steps.version.outputs.api_version }}" >> $GITHUB_STEP_SUMMARY
          echo "Wheel ${{ steps.wheel.outputs.wheel }}" >> $GITHUB_STEP_SUMMARY

  backend_image:
    name: Build and push backend image to docker hub
    runs-on: ubuntu-latest
    needs: python_project
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Download wheel from artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheel
          path: projects/ecoindex_api/dist

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: vvatelot/ecoindex-api-backend

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: projects/ecoindex_api
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: projects/ecoindex_api/docker/backend/dockerfile
          build-args: wheel=${{ needs.python_project.outputs.wheel }}

  worker_image:
    name: Build and push worker image to docker hub
    runs-on: ubuntu-latest
    needs: python_project
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Download wheel from artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheel
          path: projects/ecoindex_api/dist

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: vvatelot/ecoindex-api-worker

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: projects/ecoindex_api
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: projects/ecoindex_api/docker/worker/dockerfile
          build-args: wheel=${{ needs.python_project.outputs.wheel }}
