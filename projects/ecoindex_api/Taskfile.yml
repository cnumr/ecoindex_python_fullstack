version: '3'

includes:
  poetry: ../../tasks/PoetryTaskfile.yml
  docker: ../../tasks/DockerTaskfile.yml

vars:
  PROJECT_NAME: api

tasks:
  update-openapi:
    desc: Update the openapi.json file
    cmds:
      - echo "Update the openapi.json file"
      - poetry run update-openapi > openapi.json
      - echo "Done!"
    silent: true

  bump:
    desc: Bump the API version with rules:major, minor, patch, premajor, preminor, prepatch or prerelease.
    cmds:
      - task: poetry:bump
        vars:
          VERSION_FILE_PATH: "../../bases/ecoindex/backend/VERSION"
          VERSION_RULE: "{{.CLI_ARGS}}"
    silent: true

  docker-build-backend:
    desc: Build the backend docker image
    vars:
      VERSION:
        sh: poetry version -s
    cmds:
      - echo "Build the backend docker image with version {{.VERSION}}"
      - task: docker:build
        vars:
          VERSION: "{{.VERSION}}"
          NAME: "api-backend"
          OPTIONS: --build-arg="wheel=ecoindex_api-{{.VERSION}}-py3-none-any.whl" -f docker/backend/dockerfile
    silent: true

  docker-build-worker:
    desc: Build the worker docker image
    vars:
      VERSION:
        sh: poetry version -s
    cmds:
      - echo "Build the worker docker image with version {{.VERSION}}"
      - task: docker:build
        vars:
          VERSION: "{{.VERSION}}"
          NAME: "api-worker"
          OPTIONS: --build-arg="wheel=ecoindex_api-{{.VERSION}}-py3-none-any.whl" -f docker/worker/dockerfile
    silent: true
  
  docker-build-all:
    desc: Build poetry project and then build the docker images
    cmds:
      - task: poetry:build
      - task: docker-build-images
    silent: true

  docker-build-images:
    internal: true
    desc: Build the docker images
    deps: [docker-build-backend, docker-build-worker]
    cmds:
      - echo "Build the docker images"
    silent: true
  
  up:
    desc: Start the docker-compose API
    preconditions:
      - test -f docker-compose.yml  
    cmds:
      - docker compose up
    silent: true

  migration-create:
    desc: Create a new alembic migration
    cmds:
      - poetry run alembic revision --autogenerate -m "{{.CLI_ARGS}}"
    silent: true
  
  start-redis:
    internal: true
    cmds:
      - docker run --rm -p 6379:6379 -d redis:alpine
    status:
      - docker ps | grep redis
    silent: true

  start-worker:
    deps: [start-redis]
    internal: true
    cmds:
      - poetry run celery -A ecoindex.worker.tasks worker -l info
    silent: true
  
  start-backend:
    internal: true
    cmds:
      - poetry run uvicorn ecoindex.backend.main:app --reload
    silent: true

  start-dev:
    deps: [start-backend, start-worker]
    desc: Start the backend and the worker
    cmds:
      - echo "Starting the backend and the worker"
    silent: true
