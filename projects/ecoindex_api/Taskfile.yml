version: '3'

includes:
  poetry: ../../tasks/PoetryTaskfile.yml
  docker: ../../tasks/DockerTaskfile.yml

vars:
  PROJECT_NAME: api

tasks:
  update-openapi:
    desc: Update the openapi.json file
    cmds:
      - echo "Update the openapi.json file"
      - poetry run update-openapi > openapi.json
      - echo "Done!"
    silent: true

  bump:
    desc: Bump the API version with rules:major, minor, patch, premajor, preminor, prepatch or prerelease.
    cmds:
      - task: poetry:bump
        vars:
          VERSION_FILE_PATH: "../../bases/ecoindex/backend/VERSION"
          VERSION_RULE: "{{.CLI_ARGS}}"
    silent: true

  docker-build-backend:
    desc: Build the backend docker image
    vars:
      VERSION:
        sh: poetry version -s
    cmds:
      - echo "Build the backend docker image with version {{.VERSION}}"
      - task: docker:build
        vars:
          VERSION: "{{.VERSION}}"
          NAME: "api-backend"
          OPTIONS: --build-arg="wheel=ecoindex_api-{{.VERSION}}-py3-none-any.whl" -f docker/backend/dockerfile
    silent: true

  docker-build-worker:
    desc: Build the worker docker image
    vars:
      VERSION:
        sh: poetry version -s
    cmds:
      - echo "Build the worker docker image with version {{.VERSION}}"
      - task: docker:build
        vars:
          VERSION: "{{.VERSION}}"
          NAME: "api-worker"
          OPTIONS: --build-arg="wheel=ecoindex_api-{{.VERSION}}-py3-none-any.whl" -f docker/worker/dockerfile
    silent: true
  
  docker-build-all:
    desc: Build poetry project and then build the docker images
    cmds:
      - task: poetry:build
      - task: docker-build-images
    silent: true

  docker-build-images:
    internal: true
    desc: Build the docker images
    deps: [docker-build-backend, docker-build-worker]
    cmds:
      - echo "Build the docker images"
    silent: true
  
  docker-push-backend:
    desc: Push the backend docker image
    vars:
      VERSION:
        sh: poetry version -s
    cmds:
      - echo "Push the backend docker image with version {{.VERSION}}"
      - task: docker:push
        vars:
          VERSION: "{{.VERSION}}"
          NAME: "api-backend"
    silent: true
  
  docker-push-worker:
    desc: Push the worker docker image
    vars:
      VERSION:
        sh: poetry version -s
    cmds:
      - echo "Push the worker docker image with version {{.VERSION}}"
      - task: docker:push
        vars:
          VERSION: "{{.VERSION}}"
          NAME: "api-worker"
    silent: true
  
  docker-push-all:
    desc: Push the docker images
    deps: [docker-push-backend, docker-push-worker]
    cmds:
      - echo "Push the docker images"
    silent: true
  
  docker-pull:
    desc: Pull the docker images
    cmds:
      - echo "Pull the docker images"
      - docker compose pull
    silent: true
  
  up:
    desc: Start the docker-compose API
    deps: [init-env, init-docker-compose]
    cmds:
      - docker compose up {{.CLI_ARGS}}
    silent: true

  down:
    desc: Stop the docker-compose API
    preconditions:
      - test -f docker-compose.yml
    cmds:
      - docker compose down {{.CLI_ARGS}}
    silent: true

  exec:
    desc: Execute a command in the docker-compose API
    preconditions:
      - test -f docker-compose.yml
      - test -f .env
    cmds:
      - docker compose exec {{.CLI_ARGS}}
    silent: true

  logs:
    desc: Show the logs of the docker-compose API
    preconditions:
      - test -f docker-compose.yml
    cmds:
      - docker compose logs {{.CLI_ARGS}}
    silent: true

  migration-create:
    desc: Create a new alembic migration
    cmds:
      - poetry run alembic revision --autogenerate -m "{{.CLI_ARGS}}"
    silent: true

  migration-upgrade:
    desc: Upgrade the database to the last migration
    cmds:
      - poetry run alembic upgrade head
    silent: true
  
  start-redis:
    internal: true
    cmds:
      - docker run --rm -p 6379:6379 -d redis:alpine
    status:
      - docker ps | grep redis
    silent: true

  start-worker:
    deps: [start-redis]
    internal: true
    cmds:
      - poetry run watchmedo auto-restart --directory=../.. --pattern=worker/*.py --recursive -- poetry run celery -- -A ecoindex.worker.tasks worker -l info -Q ecoindex -E
    silent: true
  
  start-backend:
    internal: true
    cmds:
      - poetry run uvicorn ecoindex.backend.main:app --reload --reload-dir ../..
    silent: true

  start-dev:
    deps: [start-backend, start-worker]
    desc: Start the backend and the worker
    cmds:
      - echo "Starting the backend and the worker"
    silent: true

  init-env:
    desc: Initialize the .env file
    preconditions:
      - test -f .env.template
    cmds:
      - echo "Initialize the .env file"
      - cp .env.template .env
    silent: true
    internal: true
    status:
      - test -f .env

  init-dev-project:
    desc: Initialize the project for development
    cmds:
      - echo "Initialize the project for development"
      - echo "Install poetry dependencies"
      - task: poetry:install
      - echo "Install playwright"
      - task: poetry:install-playwright
      - echo "Create the environment file"
      - task: init-env
      - echo "Create the database"
      - task: migration-upgrade
      - echo "All done!"
    silent: true

  init-docker-compose:
    desc: Initialize the docker-compose API
    internal: true
    cmds:
      - echo "Initialize the docker-compose API"
      - cp docker-compose.yml.template docker-compose.yml
    silent: true
    status:
      - test -f docker-compose.yml